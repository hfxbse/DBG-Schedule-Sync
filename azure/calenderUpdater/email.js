let fs;
let minify;
let AWS;
let SES;

exports.sendPermissionNotification = async function (recipient) {
  fs = require('fs')
  minify = require('html-minifier').minify

  if(AWS === undefined) {
    AWS = require('aws-sdk')
    AWS.config.update({region: process.env.AWS_REGION})

    SES = new AWS.SES({apiVersion: '2010-12-01'})
  }

  const template = {
    Template: {
      TemplateName: process.env.AWS_EMAIL_TEMPLATE_PERMISSIONS,
      SubjectPart: fs.readFileSync(__dirname + '/emailSubject.txt').toString(),
      TextPart: fs.readFileSync(__dirname + '/email.txt').toString(),
      HtmlPart: minify(fs.readFileSync(__dirname + '/email.html').toString(), {
        collapseBooleanAttributes: true,
        includeAutoGeneratedTags: false,
        minifyCSS: true,
        processConditionalComments: true,
        removeComments: true,
        removeEmptyAttributes: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortAttributes: true,
        sortClassName: true,
      })
    }
  }

  try {
    await SES.updateTemplate(template).promise();
  } catch (e) {
    if(e.code === "TemplateDoesNotExist") {
      await SES.createTemplate(template).promise()
    } else {
      throw e
    }
  }

  await SES.sendTemplatedEmail({
    Destination: {
      ToAddresses: [recipient.address]
    },
    Template: process.env.AWS_EMAIL_TEMPLATE_PERMISSIONS,
    Source: `DBG Vertretungsplan Synchronisation <${process.env.AWS_EMAIL_SOURCE}>`,
    TemplateData: JSON.stringify({name: recipient.name})
  }).promise();
}