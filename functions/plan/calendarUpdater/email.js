let fs;
let path;
let minify;
let AWS;
let SES;
const functions = require('firebase-functions');

exports.sendPermissionNotification = async function (recipient) {
  fs = require('fs');
  path = require('path');
  minify = require('html-minifier').minify;

  const {aws: config} = functions.config();

  if (AWS === undefined) {
    AWS = require('aws-sdk');
    // noinspection JSUnresolvedVariable
    AWS.config.update({
      region: config.region,
      credentials: {
        accessKeyId: config.key_id,
        secretAccessKey: config.access_key,
      }
    });

    SES = new AWS.SES({apiVersion: '2010-12-01'});
  }

  const template = {
    Template: {
      TemplateName: config.email.templates.permissions,
      SubjectPart: fs.readFileSync(path.join(__dirname, 'emailSubject.txt')).toString(),
      TextPart: fs.readFileSync(path.join(__dirname, 'email.txt')).toString(),
      HtmlPart: minify(fs.readFileSync(path.join(__dirname, 'email.html')).toString(), {
        collapseBooleanAttributes: true,
        includeAutoGeneratedTags: false,
        minifyCSS: true,
        processConditionalComments: true,
        removeComments: true,
        removeEmptyAttributes: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortAttributes: true,
        sortClassName: true,
      })
    }
  };

  try {
    await SES.updateTemplate(template).promise();
  } catch (e) {
    if (e.code === "TemplateDoesNotExist") {
      await SES.createTemplate(template).promise();
    } else {
      throw e;
    }
  }

  // noinspection JSUnresolvedVariable
  await SES.sendTemplatedEmail({
    Destination: {
      ToAddresses: [recipient.address]
    },
    Template: config.email.templates.permissions,
    Source: `DBG Vertretungsplan Synchronisation <${config.email.source_address}>`,
    TemplateData: JSON.stringify({name: recipient.name})
  }).promise();
};