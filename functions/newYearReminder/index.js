let AWS;
let fs;
let path;
let minify;

let SES;

let admin;
const functions = require('firebase-functions');

let db;
let auth;

async function sendEmails(config, recipients) {
  path = require('path');
  minify = require('html-minifier').minify;
  fs = require('fs');

  // noinspection JSUnresolvedVariable
  const template = {
    Template: {
      TemplateName: config.email.templates.new_year_reminder,
      SubjectPart: fs.readFileSync(path.join(__dirname, 'emailSubject.txt')).toString(),
      TextPart: fs.readFileSync(path.join(__dirname, 'email.txt')).toString(),
      HtmlPart: minify(fs.readFileSync(path.join(__dirname, 'email.html')).toString(), {
        collapseBooleanAttributes: true,
        includeAutoGeneratedTags: false,
        minifyCSS: true,
        processConditionalComments: true,
        removeComments: true,
        removeEmptyAttributes: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortAttributes: true,
        sortClassName: true,
      })
    }
  };

  try {
    await SES.updateTemplate(template).promise();
  } catch (e) {
    if (e.code === "TemplateDoesNotExist") {
      await SES.createTemplate(template).promise();
    } else {
      throw e;
    }
  }

  // noinspection JSUnresolvedVariable
  await SES.sendBulkTemplatedEmail({
    Destinations: recipients.map(recipient => ({
      Destination: {
        ToAddresses: [
          recipient.address
        ]
      },
      ReplacementTemplateData: JSON.stringify({name: recipient.name})
    })),
    Source: `DBG Vertretungsplan Synchronisation <${config.email.source_address}>`,
    Template: config.email.templates.new_year_reminder,
    DefaultTemplateData: JSON.stringify({}),
  }).promise();
}
const functionOptions = functions
    .region('europe-west1')
    .pubsub.schedule('0 17 16 SEP *').timeZone('Europe/Berlin');

exports.new_year_reminder = functionOptions.onRun(async () => {
  AWS = require('aws-sdk');
  admin = require('firebase-admin');

  const config = functions.config().aws;

  if (SES === undefined) {
    // noinspection JSUnresolvedVariable
    AWS.config.update({
      region: config.region,
      credentials: {
        accessKeyId: config.key_id,
        secretAccessKey: config.access_key,
      }
    });

    SES = new AWS.SES({apiVersion: '2010-12-01'});
  }

  if (db === undefined) {
    db = admin.firestore();
  }

  if (auth === undefined) {
    auth = admin.auth();
  }

  let calendars = await db.collection('calendars').get();
  calendars = calendars.docs.filter(doc => {
    const data = doc.data().google;
    return 'id' in data && 'refresh_token' in data;
  });

  if (calendars.length > 0) {
    let recipients = await Promise.all(calendars.map(doc => (async () => {
      try {
        const user = await auth.getUser(doc.id);
        return {address: user.email, name: user.displayName.replace("â€‹", "").trim()};
      } catch (e) {
        functions.logger.warn(e);
        return undefined;
      }
    })()));

    recipients = recipients.filter(address => address !== undefined);

    if (process.env.FIREBASE_DEBUG_MODE) {
      functions.logger.debug('Removing email addresses not marked as debug');
      // noinspection JSUnresolvedVariable
      const debugAddresses = new Set(config.email.debug_addresses.split(' '));

      recipients = recipients.filter(recipient => debugAddresses.has(recipient.address));
    }

    if (recipients.length > 0) {
      await sendEmails(config, recipients.filter(recipient => recipient !== undefined));
      return;
    }
  }

  functions.logger.info("No emails send as there are no active users.");
});